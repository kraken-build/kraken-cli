{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the kraken-cli documentation! Kraken CLI is the command-line interface for the Kraken build system. It's responsibilities are executing build scripts to generate a build graph allow you to inspect and execute tasks in the build graph manage a separate Python virtual environment with build time dependencies to ensure consistent, repeatable builds (see Build Environment ) Synopsis $ kraken --help usage: kraken [-h] [--version] [{run,fmt,lint,build,test,ls,query,describe,env,viz}] ... positional arguments: {run,fmt,lint,build,test,ls,query,describe,env,viz} the subcommand to execute ... arguments for the subcommand options: -h, --help show this help message and exit --version show program's version number and exit subcommands: run execute one or more kraken tasks fmt execute \"fmt\" tasks lint execute \"lint\" tasks build execute \"build\" tasks test execute \"test\" tasks ls list targets in the build query perform queries on the build graph describe describe one or more tasks in detail env manage the build environment viz GraphViz for the task graph $ kraken env --help usage: kraken env [-h] [{info,install,upgrade,lock,remove}] ... positional arguments: {info,install,upgrade,lock,remove} the subcommand to execute ... arguments for the subcommand options: -h, --help show this help message and exit subcommands: info provide the info on the build environment install ensure the build environment is installed upgrade upgrade the build environment and lock file lock create or update the lock file remove remove the build environment","title":"Welcome to the `kraken-cli` documentation!"},{"location":"#welcome-to-the-kraken-cli-documentation","text":"Kraken CLI is the command-line interface for the Kraken build system. It's responsibilities are executing build scripts to generate a build graph allow you to inspect and execute tasks in the build graph manage a separate Python virtual environment with build time dependencies to ensure consistent, repeatable builds (see Build Environment )","title":"Welcome to the kraken-cli documentation!"},{"location":"#synopsis","text":"$ kraken --help usage: kraken [-h] [--version] [{run,fmt,lint,build,test,ls,query,describe,env,viz}] ... positional arguments: {run,fmt,lint,build,test,ls,query,describe,env,viz} the subcommand to execute ... arguments for the subcommand options: -h, --help show this help message and exit --version show program's version number and exit subcommands: run execute one or more kraken tasks fmt execute \"fmt\" tasks lint execute \"lint\" tasks build execute \"build\" tasks test execute \"test\" tasks ls list targets in the build query perform queries on the build graph describe describe one or more tasks in detail env manage the build environment viz GraphViz for the task graph $ kraken env --help usage: kraken env [-h] [{info,install,upgrade,lock,remove}] ... positional arguments: {info,install,upgrade,lock,remove} the subcommand to execute ... arguments for the subcommand options: -h, --help show this help message and exit subcommands: info provide the info on the build environment install ensure the build environment is installed upgrade upgrade the build environment and lock file lock create or update the lock file remove remove the build environment","title":"Synopsis"},{"location":"buildenv/","text":"Build Environment The Kraken CLI manages a separate build environment in which only the requirements needed for the execution of the build script are installed. The build requirements are read from the header of the .kraken.py build script of the root project. Example : # ::requirements PyYAML kraken-std # ::requirements --extra-index-url https://test.pypi.org/simple # ::pythonpath ./build-support Info The ::requirements and ::pythonpath lines must be within the first single-line comment block at the top of the file. Using ::pythonpath , you can specify a path relative to your project directory that should be added to sys.path when executing your build script. Warning The requirements listed in build scripts that are included as sub projects by the main build script are ignored, thus collecting the dependencies of build scripts transitively is not currently supported. Using the kraken env lock or kraken env update command will write a lock file named .kraken.lock that is a JSON file containing the exact installed versions. Below is a summary of Kraken CLI's behaviour for several commands with respect to the build environment: Command Behaviour kraken env install Ensure that the build environment is installed. (1) kraken env upgrade Reinstall requirements, ignoring the existing lock file and write a new one. kraken env lock Write the lock file. Requires that the build environment exists. kraken env remove Delete the build environment. kraken run (1) Workflow chart Environment variables The following environment variables alter the behaviour of Kraken CLI with respect to the build environment: Variables Description KRAKEN_MANAGED If set to 1 , the Python environment from which the kraken command is run will be considered the build environment. No requirements will be installed and no subprocess is used to dispatch the build to a separate Python environment. KRAKEN_DEVELOP If set to 1 , Kraken CLI must currently be installed in develop mode and will instruct it to install the same Kraken CLI from your local file system into the build environment instead of from PyPI. Note: Currently, the source directory of the kraken-cli project is derived by following the symlink of the kraken/cli/__init__.py file and then looking four directories up (cli, kraken, src, kraken-cli project root). This assumption is made based on how symlink installs work with slap link or slap install --link .","title":"Build Environment"},{"location":"buildenv/#build-environment","text":"The Kraken CLI manages a separate build environment in which only the requirements needed for the execution of the build script are installed. The build requirements are read from the header of the .kraken.py build script of the root project. Example : # ::requirements PyYAML kraken-std # ::requirements --extra-index-url https://test.pypi.org/simple # ::pythonpath ./build-support Info The ::requirements and ::pythonpath lines must be within the first single-line comment block at the top of the file. Using ::pythonpath , you can specify a path relative to your project directory that should be added to sys.path when executing your build script. Warning The requirements listed in build scripts that are included as sub projects by the main build script are ignored, thus collecting the dependencies of build scripts transitively is not currently supported. Using the kraken env lock or kraken env update command will write a lock file named .kraken.lock that is a JSON file containing the exact installed versions. Below is a summary of Kraken CLI's behaviour for several commands with respect to the build environment: Command Behaviour kraken env install Ensure that the build environment is installed. (1) kraken env upgrade Reinstall requirements, ignoring the existing lock file and write a new one. kraken env lock Write the lock file. Requires that the build environment exists. kraken env remove Delete the build environment. kraken run (1)","title":"Build Environment"},{"location":"buildenv/#workflow-chart","text":"","title":"Workflow chart"},{"location":"buildenv/#environment-variables","text":"The following environment variables alter the behaviour of Kraken CLI with respect to the build environment: Variables Description KRAKEN_MANAGED If set to 1 , the Python environment from which the kraken command is run will be considered the build environment. No requirements will be installed and no subprocess is used to dispatch the build to a separate Python environment. KRAKEN_DEVELOP If set to 1 , Kraken CLI must currently be installed in develop mode and will instruct it to install the same Kraken CLI from your local file system into the build environment instead of from PyPI. Note: Currently, the source directory of the kraken-cli project is derived by following the symlink of the kraken/cli/__init__.py file and then looking four directories up (cli, kraken, src, kraken-cli project root). This assumption is made based on how symlink installs work with slap link or slap install --link .","title":"Environment variables"},{"location":"changelog/","text":"Changelog 0.2.14 (2022-07-24) Type Description PR Issues Author Feature preview of resumable builds, added `--resume` and `--restart` option to build graph aware commands 11 @NiklasRosenstein Improvement compatibility with `kraken-core ^0.5.0` API @NiklasRosenstein 0.2.13 (2022-07-24) Type Description PR Issues Author Feature add `-0,--allow-no-tasks` option that allows no tasks to be selected to `kraken run` command @NiklasRosenstein 0.2.12 (2022-07-24) Type Description PR Issues Author Improvement `kraken run` now prints a build summary table at the end @NiklasRosenstein 0.2.11 (2022-07-24) Type Description PR Issues Author Improvement add compatibility with the `kraken-core ^0.4.0` API @NiklasRosenstein 0.2.10 (2022-07-23) Type Description PR Issues Author Feature add `kraken viz` command which produces GraphViz code of the build graph, and allows you to immediately view it in the browser with the `-s,--show` option @NiklasRosenstein 0.2.9 (2022-07-22) Type Description PR Issues Author Improvement Upgrade Pip immediately after creating virtual environment, alongside the `keyring` installation 9 @NiklasRosenstein Improvement Improve lockfile calculation to include only distributions that are actually required; evaluating requirement markers to filter out any distribution requirements that are not required. This leaves `pip` as an \"unrequired extra distribution\" in many cases, which is expected, so we remove it from the extra distributions set. 9 @NiklasRosenstein 0.2.8 (2022-07-22) Type Description PR Issues Author Improvement Allow passing `-v` option multiple times to increase verbosity up to DEBUG (close #5) 5 @NiklasRosenstein Improvement Adding `-v` now shows Pip install output, `-vv` and `-vvv` will add `-v` and `-vv` to Pip install respectively @NiklasRosenstein Feature Installing `keyring` into Build environment as first step to ensure subsequent `BuildEnvironment.install()` can look up credentials in the system keychain (close #7) 7 @NiklasRosenstein 0.2.7 (2022-07-21) Type Description PR Issues Author Fix Pass `--no-input` option to `pip install` to fail immediately if the credentials for a package index are missing instead of prompting the user for username/password @NiklasRosenstein Improvement No longer print warning if no build environment exists that the environment is outdated with the lockfile, instead just print \"Installing from lockfile\". Also move the warning if requirement spec has changed compared to lock file after the previous message @NiklasRosenstein 0.2.6 (2022-07-21) Type Description PR Issues Author Improvement Sort keys in `.kraken.lock` file (close #6) 6 @NiklasRosenstein 0.2.5 (2022-07-20) Type Description PR Issues Author Improvement print Pip install logs if installing build environment fails (close #3) 3 @NiklasRosenstein 0.2.4 (2022-07-20) Type Description PR Issues Author Improvement flush after print to ensure correct order in CI output @NiklasRosenstein Feature Rename `kraken env status` command to `kraken env info` and add `-P,--path` argument to print only the path to the build environment if it exists 1 @NiklasRosenstein Feature add support for `# :: pythonpath` option in the Kraken build script 2 @NiklasRosenstein 0.2.3 (2022-07-19) Type Description PR Issues Author Fix fix an error when warning about extra distributions in `kraken env lock`, add a print when writing to the lock file, add some logic to normalize distribution names when parsing through the distribution requirements graph (this allows `Jinja2` to be understood as a requirement when `jinja2` (lowercase) was listed in the spec) @NiklasRosenstein 0.2.2 (2022-07-19) Type Description PR Issues Author Improvement left justify logger level instead of right justify @NiklasRosenstein 0.2.1 (2022-07-19) Type Description PR Issues Author Improvement Do not error if no tasks were selected if the `-s,--skip-build` option is passed to `kraken run` @NiklasRosenstein Improvement left justify logger name on 24 characters @NiklasRosenstein 0.2.0 (2022-07-19) Type Description PR Issues Author Improvement improve output of CLI when bootstrapping a build environment @NiklasRosenstein Improvement bump requirement on kraken-core to `^0.3.0` @NiklasRosenstein 0.1.11 (2022-07-18) Type Description PR Issues Author Improvement add INFO log when KRAKEN_MANAGED=1 is set @NiklasRosenstein 0.1.10 (2022-07-18) Type Description PR Issues Author Breaking change move `kraken.cli.executor` module to `kraken-core` @NiklasRosenstein 0.1.9 (2022-07-18) Type Description PR Issues Author Improvement calculate table column with in `kraken ls` command instead of using a fixed 32 characters @NiklasRosenstein Breaking change move `kraken query --describe` functionality in `kraken describe` command @NiklasRosenstein 0.1.8 (2022-07-16) Type Description PR Issues Author Improvement ignore dependencies that are not required when locking @NiklasRosenstein 0.1.7 (2022-07-15) Type Description PR Issues Author Improvement using -v,--verbose no longer captures any output @NiklasRosenstein Feature the kraken CLI now manages a build environment from requirements specified in your build script or a separate requirements file and can generate a lock file @NiklasRosenstein 0.1.6 (2022-07-13) Type Description PR Issues Author Improvement update `kraken ls` command to print all tasks by default and print in a tabular format, add `kraken query --describe` option @NiklasRosenstein Feature add aliases for default tasks named \"fmt\", \"lint\", \"build\" and \"test\" @NiklasRosenstein 0.1.5 (2022-07-13) Type Description PR Issues Author Fix fix returning non-zero exit code from `kraken run` command on build failure @NiklasRosenstein 0.1.4 (2022-07-13) Type Description PR Issues Author Improvement color-format logging @NiklasRosenstein Feature add `-q,--quiet` flag to Kraken commands @NiklasRosenstein Feature add `kraken query` command @NiklasRosenstein 0.1.3 (2022-07-06) Type Description PR Issues Author Fix show task output on -v option @NiklasRosenstein Feature add `-s,--skip-build` option to `kraken run` @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0214-2022-07-24","text":"Type Description PR Issues Author Feature preview of resumable builds, added `--resume` and `--restart` option to build graph aware commands 11 @NiklasRosenstein Improvement compatibility with `kraken-core ^0.5.0` API @NiklasRosenstein","title":"0.2.14 (2022-07-24)"},{"location":"changelog/#0213-2022-07-24","text":"Type Description PR Issues Author Feature add `-0,--allow-no-tasks` option that allows no tasks to be selected to `kraken run` command @NiklasRosenstein","title":"0.2.13 (2022-07-24)"},{"location":"changelog/#0212-2022-07-24","text":"Type Description PR Issues Author Improvement `kraken run` now prints a build summary table at the end @NiklasRosenstein","title":"0.2.12 (2022-07-24)"},{"location":"changelog/#0211-2022-07-24","text":"Type Description PR Issues Author Improvement add compatibility with the `kraken-core ^0.4.0` API @NiklasRosenstein","title":"0.2.11 (2022-07-24)"},{"location":"changelog/#0210-2022-07-23","text":"Type Description PR Issues Author Feature add `kraken viz` command which produces GraphViz code of the build graph, and allows you to immediately view it in the browser with the `-s,--show` option @NiklasRosenstein","title":"0.2.10 (2022-07-23)"},{"location":"changelog/#029-2022-07-22","text":"Type Description PR Issues Author Improvement Upgrade Pip immediately after creating virtual environment, alongside the `keyring` installation 9 @NiklasRosenstein Improvement Improve lockfile calculation to include only distributions that are actually required; evaluating requirement markers to filter out any distribution requirements that are not required. This leaves `pip` as an \"unrequired extra distribution\" in many cases, which is expected, so we remove it from the extra distributions set. 9 @NiklasRosenstein","title":"0.2.9 (2022-07-22)"},{"location":"changelog/#028-2022-07-22","text":"Type Description PR Issues Author Improvement Allow passing `-v` option multiple times to increase verbosity up to DEBUG (close #5) 5 @NiklasRosenstein Improvement Adding `-v` now shows Pip install output, `-vv` and `-vvv` will add `-v` and `-vv` to Pip install respectively @NiklasRosenstein Feature Installing `keyring` into Build environment as first step to ensure subsequent `BuildEnvironment.install()` can look up credentials in the system keychain (close #7) 7 @NiklasRosenstein","title":"0.2.8 (2022-07-22)"},{"location":"changelog/#027-2022-07-21","text":"Type Description PR Issues Author Fix Pass `--no-input` option to `pip install` to fail immediately if the credentials for a package index are missing instead of prompting the user for username/password @NiklasRosenstein Improvement No longer print warning if no build environment exists that the environment is outdated with the lockfile, instead just print \"Installing from lockfile\". Also move the warning if requirement spec has changed compared to lock file after the previous message @NiklasRosenstein","title":"0.2.7 (2022-07-21)"},{"location":"changelog/#026-2022-07-21","text":"Type Description PR Issues Author Improvement Sort keys in `.kraken.lock` file (close #6) 6 @NiklasRosenstein","title":"0.2.6 (2022-07-21)"},{"location":"changelog/#025-2022-07-20","text":"Type Description PR Issues Author Improvement print Pip install logs if installing build environment fails (close #3) 3 @NiklasRosenstein","title":"0.2.5 (2022-07-20)"},{"location":"changelog/#024-2022-07-20","text":"Type Description PR Issues Author Improvement flush after print to ensure correct order in CI output @NiklasRosenstein Feature Rename `kraken env status` command to `kraken env info` and add `-P,--path` argument to print only the path to the build environment if it exists 1 @NiklasRosenstein Feature add support for `# :: pythonpath` option in the Kraken build script 2 @NiklasRosenstein","title":"0.2.4 (2022-07-20)"},{"location":"changelog/#023-2022-07-19","text":"Type Description PR Issues Author Fix fix an error when warning about extra distributions in `kraken env lock`, add a print when writing to the lock file, add some logic to normalize distribution names when parsing through the distribution requirements graph (this allows `Jinja2` to be understood as a requirement when `jinja2` (lowercase) was listed in the spec) @NiklasRosenstein","title":"0.2.3 (2022-07-19)"},{"location":"changelog/#022-2022-07-19","text":"Type Description PR Issues Author Improvement left justify logger level instead of right justify @NiklasRosenstein","title":"0.2.2 (2022-07-19)"},{"location":"changelog/#021-2022-07-19","text":"Type Description PR Issues Author Improvement Do not error if no tasks were selected if the `-s,--skip-build` option is passed to `kraken run` @NiklasRosenstein Improvement left justify logger name on 24 characters @NiklasRosenstein","title":"0.2.1 (2022-07-19)"},{"location":"changelog/#020-2022-07-19","text":"Type Description PR Issues Author Improvement improve output of CLI when bootstrapping a build environment @NiklasRosenstein Improvement bump requirement on kraken-core to `^0.3.0` @NiklasRosenstein","title":"0.2.0 (2022-07-19)"},{"location":"changelog/#0111-2022-07-18","text":"Type Description PR Issues Author Improvement add INFO log when KRAKEN_MANAGED=1 is set @NiklasRosenstein","title":"0.1.11 (2022-07-18)"},{"location":"changelog/#0110-2022-07-18","text":"Type Description PR Issues Author Breaking change move `kraken.cli.executor` module to `kraken-core` @NiklasRosenstein","title":"0.1.10 (2022-07-18)"},{"location":"changelog/#019-2022-07-18","text":"Type Description PR Issues Author Improvement calculate table column with in `kraken ls` command instead of using a fixed 32 characters @NiklasRosenstein Breaking change move `kraken query --describe` functionality in `kraken describe` command @NiklasRosenstein","title":"0.1.9 (2022-07-18)"},{"location":"changelog/#018-2022-07-16","text":"Type Description PR Issues Author Improvement ignore dependencies that are not required when locking @NiklasRosenstein","title":"0.1.8 (2022-07-16)"},{"location":"changelog/#017-2022-07-15","text":"Type Description PR Issues Author Improvement using -v,--verbose no longer captures any output @NiklasRosenstein Feature the kraken CLI now manages a build environment from requirements specified in your build script or a separate requirements file and can generate a lock file @NiklasRosenstein","title":"0.1.7 (2022-07-15)"},{"location":"changelog/#016-2022-07-13","text":"Type Description PR Issues Author Improvement update `kraken ls` command to print all tasks by default and print in a tabular format, add `kraken query --describe` option @NiklasRosenstein Feature add aliases for default tasks named \"fmt\", \"lint\", \"build\" and \"test\" @NiklasRosenstein","title":"0.1.6 (2022-07-13)"},{"location":"changelog/#015-2022-07-13","text":"Type Description PR Issues Author Fix fix returning non-zero exit code from `kraken run` command on build failure @NiklasRosenstein","title":"0.1.5 (2022-07-13)"},{"location":"changelog/#014-2022-07-13","text":"Type Description PR Issues Author Improvement color-format logging @NiklasRosenstein Feature add `-q,--quiet` flag to Kraken commands @NiklasRosenstein Feature add `kraken query` command @NiklasRosenstein","title":"0.1.4 (2022-07-13)"},{"location":"changelog/#013-2022-07-06","text":"Type Description PR Issues Author Fix show task output on -v option @NiklasRosenstein Feature add `-s,--skip-build` option to `kraken run` @NiklasRosenstein","title":"0.1.3 (2022-07-06)"}]}